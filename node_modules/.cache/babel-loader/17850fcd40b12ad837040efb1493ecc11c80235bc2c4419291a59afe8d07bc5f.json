{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport './Typing.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_WORDS = 60;\nconst WORDS_PER_LINE = 7;\nconst MAX_LINES = Math.ceil(MAX_WORDS / WORDS_PER_LINE);\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numWords\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [currWord, setCurrWord] = useState(0);\n  const [lines, setLines] = useState([]);\n  useEffect(() => {\n    setWords(generateWords());\n  }, [numWords]);\n  function generateWords() {\n    return new Array(numWords).fill(null).map(() => generate());\n  }\n  function handleKeyDown(event) {\n    const keyCode = event.keyCode;\n    if (keyCode === 32) {\n      // Handle spacebar press\n      handleSpace();\n    } else if (keyCode === 8) {\n      // Handle backspace press\n      handleBackspace();\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      // Handle letter press\n      const chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      const chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      handleLetter(chr.toLowerCase());\n    }\n  }\n  function handleSpace() {\n    setCurrInput([]);\n    setCurrWord(prevState => prevState + 1);\n    checkLineCompletion();\n  }\n  function handleBackspace() {\n    if (currInput.length > 0) {\n      setCurrInput(currInput.slice(0, -1));\n    }\n  }\n  function handleLetter(chr) {\n    setCurrInput(prevInput => [...prevInput, chr.toLowerCase()]);\n  }\n  function checkMatch(word, index) {\n    if (index >= word.length) {\n      return \"redundant\";\n    }\n    if (word[index] === currInput[index]) {\n      return \"correct\";\n    } else {\n      return \"incorrect\";\n    }\n  }\n  function checkLineCompletion() {\n    const lineIndex = Math.floor(currWord / WORDS_PER_LINE);\n    if (lineIndex >= MAX_LINES) {\n      const remainingLines = lines.slice(1);\n      setLines(remainingLines);\n    }\n    const newLine = words.slice(currWord, currWord + WORDS_PER_LINE);\n    setLines(prevLines => [...prevLines, newLine]);\n  }\n  function changeColor(index, lineIndex) {\n    if (lineIndex === lines.length - 1) {\n      return index === currInput.length ? \"current\" : \"upcoming\";\n    } else if (lineIndex < lines.length - 1) {\n      return \"completed\";\n    } else {\n      return \"upcoming\";\n    }\n  }\n  function injectExtraWord(index, lineIndex) {\n    if (lineIndex === lines.length - 1 && index === currInput.length) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"extra-word\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  }\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currWord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: lines.map((line, lineIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: line.map((word, wordIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `word-${checkMatch(word, wordIndex)} ${changeColor(wordIndex, lineIndex)}`,\n            children: [word, injectExtraWord(wordIndex, lineIndex)]\n          }, wordIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this))\n        }, lineIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input\",\n        children: [currInput.join(''), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cursor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(Typing, \"ndAQsWAWWvAypcG72aF9MdLSjaI=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","jsxDEV","_jsxDEV","MAX_WORDS","WORDS_PER_LINE","MAX_LINES","Math","ceil","Typing","_ref","_s","numWords","words","setWords","currInput","setCurrInput","currWord","setCurrWord","lines","setLines","generateWords","Array","fill","map","handleKeyDown","event","keyCode","handleSpace","handleBackspace","chrCode","floor","chr","String","fromCharCode","handleLetter","toLowerCase","prevState","checkLineCompletion","length","slice","prevInput","checkMatch","word","index","lineIndex","remainingLines","newLine","prevLines","changeColor","injectExtraWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","window","addEventListener","removeEventListener","line","wordIndex","join","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { generate } from 'random-words';\r\nimport './Typing.css';\r\n\r\nconst MAX_WORDS = 60;\r\nconst WORDS_PER_LINE = 7;\r\nconst MAX_LINES = Math.ceil(MAX_WORDS / WORDS_PER_LINE);\r\n\r\nexport default function Typing({ numWords }) {\r\n  const [words, setWords] = useState([]);\r\n  const [currInput, setCurrInput] = useState([]);\r\n  const [currWord, setCurrWord] = useState(0);\r\n  const [lines, setLines] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setWords(generateWords());\r\n  }, [numWords]);\r\n\r\n  function generateWords() {\r\n    return new Array(numWords).fill(null).map(() => generate());\r\n  }\r\n\r\n  function handleKeyDown(event) {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (keyCode === 32) {\r\n      // Handle spacebar press\r\n      handleSpace();\r\n    } else if (keyCode === 8) {\r\n      // Handle backspace press\r\n      handleBackspace();\r\n    } else if (keyCode >= 65 && keyCode <= 90) {\r\n      // Handle letter press\r\n      const chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n      const chr = String.fromCharCode((96 <= keyCode) ? chrCode : keyCode);\r\n      handleLetter(chr.toLowerCase());\r\n    }\r\n  }\r\n\r\n  function handleSpace() {\r\n    setCurrInput([]);\r\n    setCurrWord(prevState => prevState + 1);\r\n    checkLineCompletion();\r\n  }\r\n\r\n  function handleBackspace() {\r\n    if (currInput.length > 0) {\r\n      setCurrInput(currInput.slice(0, -1));\r\n    }\r\n  }\r\n\r\n  function handleLetter(chr) {\r\n    setCurrInput(prevInput => [...prevInput, chr.toLowerCase()]);\r\n  }\r\n\r\n  function checkMatch(word, index) {\r\n    if (index >= word.length) {\r\n      return \"redundant\";\r\n    }\r\n\r\n    if (word[index] === currInput[index]) {\r\n      return \"correct\";\r\n    } else {\r\n      return \"incorrect\";\r\n    }\r\n  }\r\n\r\n  function checkLineCompletion() {\r\n    const lineIndex = Math.floor(currWord / WORDS_PER_LINE);\r\n    if (lineIndex >= MAX_LINES) {\r\n      const remainingLines = lines.slice(1);\r\n      setLines(remainingLines);\r\n    }\r\n\r\n    const newLine = words.slice(currWord, currWord + WORDS_PER_LINE);\r\n    setLines(prevLines => [...prevLines, newLine]);\r\n  }\r\n\r\n  function changeColor(index, lineIndex) {\r\n    if (lineIndex === lines.length - 1) {\r\n      return index === currInput.length ? \"current\" : \"upcoming\";\r\n    } else if (lineIndex < lines.length - 1) {\r\n      return \"completed\";\r\n    } else {\r\n      return \"upcoming\";\r\n    }\r\n  }\r\n\r\n  function injectExtraWord(index, lineIndex) {\r\n    if (lineIndex === lines.length - 1 && index === currInput.length) {\r\n      return <span className=\"extra-word\">{\" \"}</span>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkLineCompletion();\r\n  }, [currWord]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"typing--section\">\r\n        <div className=\"prompt\">\r\n          {lines.map((line, lineIndex) => (\r\n            <div key={lineIndex}>\r\n              {line.map((word, wordIndex) => (\r\n                <span\r\n                  key={wordIndex}\r\n                  className={`word-${checkMatch(word, wordIndex)} ${changeColor(wordIndex, lineIndex)}`}\r\n                >\r\n                  {word}\r\n                  {injectExtraWord(wordIndex, lineIndex)}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"input\">\r\n          {currInput.join('')}\r\n          <span className=\"cursor\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}