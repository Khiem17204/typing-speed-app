{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport { toBeChecked } from '@testing-library/jest-dom/matchers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numWords\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [char, setChar] = useState('');\n  const [currWord, setCurrWord] = useState(0);\n  const [currIndex, setCurrIndex] = useState(-1);\n  const [completedLines, setCompletedLines] = useState(0);\n  useEffect(() => {\n    setWords(generateWords());\n  }, [numWords]);\n  function generateWords() {\n    return new Array(numWords).fill(null).map(() => generate());\n  }\n  const handleKeyDown = event => {\n    const keyCode = event.keyCode;\n    if (keyCode === 32) {\n      setCurrInput([]);\n      setCurrWord(prevState => prevState + 1);\n      setCurrIndex(-1);\n      setChar('space');\n    } else if (keyCode === 8) {\n      if (currInput.length !== 0) {\n        setCurrInput(currInput => currInput.slice(0, -1));\n        setCurrIndex(index => Math.max(index - 1, -1));\n        setChar('backspace');\n      }\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      const chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      const chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      setChar(chr.toLowerCase());\n      setCurrInput(input => [...input, chr.toLowerCase()]);\n      setCurrIndex(index => index + 1);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    console.log('A key was pressed:', currInput, char, words[currWord], currIndex);\n  }, [currInput]);\n  function checkMatch(char) {\n    var _words$currWord;\n    if (currIndex >= ((_words$currWord = words[currWord]) === null || _words$currWord === void 0 ? void 0 : _words$currWord.length)) {\n      return 'redundant';\n    }\n    if (words[currWord][currIndex] === char) {\n      return 'correct';\n    } else {\n      return 'incorrect';\n    }\n  }\n  useEffect(() => {\n    if (currWord >= 60 && (currWord - completedLines * 7) % 7 === 0) {\n      setCompletedLines(lines => lines + 1);\n    }\n  }, [currWord]);\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\n    // Your logic for injecting extra words\n    // ...\n  }\n  function changeColor() {\n    // Your logic for changing color\n    // ...\n  }\n  useEffect(() => {\n    injectExtraWords(words, currIndex, currWord, currInput, char);\n    changeColor();\n  }, [currInput]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: words.map((word, i) => {\n          const lineIndex = Math.floor(i / 7);\n          if (lineIndex > completedLines + 1) {\n            return null;\n          }\n          if (lineIndex === completedLines + 1) {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${i}`,\n              children: word.split('').map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                id: `${i}-${idx}`,\n                className: `word-${checkMatch(char)}`,\n                children: char\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this))\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `${i}`,\n            children: [word.split('').map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${i}-${idx}`,\n              className: \"word-unrendered\",\n              children: char\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(Typing, \"Y+iwayznj314cIi9Dv1aj6WhHAw=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","toBeChecked","jsxDEV","_jsxDEV","Typing","_ref","_s","numWords","words","setWords","currInput","setCurrInput","char","setChar","currWord","setCurrWord","currIndex","setCurrIndex","completedLines","setCompletedLines","generateWords","Array","fill","map","handleKeyDown","event","keyCode","prevState","length","slice","index","Math","max","chrCode","floor","chr","String","fromCharCode","toLowerCase","input","window","addEventListener","removeEventListener","console","log","checkMatch","_words$currWord","lines","injectExtraWords","changeColor","children","className","word","i","lineIndex","id","split","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { generate } from 'random-words';\r\nimport { toBeChecked } from '@testing-library/jest-dom/matchers';\r\n\r\nexport default function Typing({ numWords }) {\r\n  const [words, setWords] = useState([]);\r\n  const [currInput, setCurrInput] = useState([]);\r\n  const [char, setChar] = useState('');\r\n  const [currWord, setCurrWord] = useState(0);\r\n  const [currIndex, setCurrIndex] = useState(-1);\r\n  const [completedLines, setCompletedLines] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setWords(generateWords());\r\n  }, [numWords]);\r\n\r\n  function generateWords() {\r\n    return new Array(numWords).fill(null).map(() => generate());\r\n  }\r\n\r\n  const handleKeyDown = (event) => {\r\n    const keyCode = event.keyCode;\r\n\r\n    if (keyCode === 32) {\r\n      setCurrInput([]);\r\n      setCurrWord((prevState) => prevState + 1);\r\n      setCurrIndex(-1);\r\n      setChar('space');\r\n    } else if (keyCode === 8) {\r\n      if (currInput.length !== 0) {\r\n        setCurrInput((currInput) => currInput.slice(0, -1));\r\n        setCurrIndex((index) => Math.max(index - 1, -1));\r\n        setChar('backspace');\r\n      }\r\n    } else if (keyCode >= 65 && keyCode <= 90) {\r\n      const chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n      const chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\r\n      setChar(chr.toLowerCase());\r\n      setCurrInput((input) => [...input, chr.toLowerCase()]);\r\n      setCurrIndex((index) => index + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('A key was pressed:', currInput, char, words[currWord], currIndex);\r\n  }, [currInput]);\r\n\r\n  function checkMatch(char) {\r\n    if (currIndex >= words[currWord]?.length) {\r\n      return 'redundant';\r\n    }\r\n\r\n    if (words[currWord][currIndex] === char) {\r\n      return 'correct';\r\n    } else {\r\n      return 'incorrect';\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (currWord >= 60 && (currWord - completedLines * 7) % 7 === 0) {\r\n      setCompletedLines((lines) => lines + 1);\r\n    }\r\n  }, [currWord]);\r\n\r\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\r\n    // Your logic for injecting extra words\r\n    // ...\r\n\r\n  }\r\n\r\n  function changeColor() {\r\n    // Your logic for changing color\r\n    // ...\r\n  }\r\n\r\n  useEffect(() => {\r\n    injectExtraWords(words, currIndex, currWord, currInput, char);\r\n    changeColor();\r\n  }, [currInput]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"typing--section\">\r\n        <div className=\"prompt\">\r\n          {words.map((word, i) => {\r\n            const lineIndex = Math.floor(i / 7);\r\n            if (lineIndex > completedLines + 1) {\r\n              return null;\r\n            }\r\n            if (lineIndex === completedLines + 1) {\r\n              return (\r\n                <span key={i} id={`${i}`}>\r\n                  {word.split('').map((char, idx) => (\r\n                    <span\r\n                      key={idx}\r\n                      id={`${i}-${idx}`}\r\n                      className={`word-${checkMatch(char)}`}\r\n                    >\r\n                      {char}\r\n                    </span>\r\n                  ))}\r\n                </span>\r\n              );\r\n            }\r\n            return (\r\n              <span key={i} id={`${i}`}>\r\n                {word.split('').map((char, idx) => (\r\n                  <span\r\n                    key={idx}\r\n                    id={`${i}-${idx}`}\r\n                    className=\"word-unrendered\"\r\n                  >\r\n                    {char}\r\n                  </span>\r\n                ))}\r\n                <span> </span>\r\n              </span>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}