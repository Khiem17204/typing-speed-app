{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(node, checkWith) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    normalizeWhitespace: true\n  };\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","toHaveTextContent","_utils","require","node","checkWith","options","arguments","length","undefined","normalizeWhitespace","checkNode","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","utils","matcherHint"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAE7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE/B,SAASF,iBAAiBA,CAACG,IAAI,EAAEC,SAAS,EAEvC;EAAA,IAFyCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IACpDG,mBAAmB,EAAE;EACvB,CAAC;EACC,CAAC,CAAC,EAAER,MAAM,CAACS,SAAS,EAAEP,IAAI,EAAEH,iBAAiB,EAAE,IAAI,CAAC;EACpD,MAAMW,WAAW,GAAGN,OAAO,CAACI,mBAAmB,GAAG,CAAC,CAAC,EAAER,MAAM,CAACW,SAAS,EAAET,IAAI,CAACQ,WAAW,CAAC,GAAGR,IAAI,CAACQ,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEtI,MAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAE,IAAIP,SAAS,KAAK,EAAE;EACtE,OAAO;IACLW,IAAI,EAAE,CAACD,uBAAuB,IAAI,CAAC,CAAC,EAAEb,MAAM,CAACe,OAAO,EAAEL,WAAW,EAAEP,SAAS,CAAC;IAC7Ea,OAAO,EAAEA,CAAA,KAAM;MACb,MAAMC,EAAE,GAAG,IAAI,CAACC,KAAK,GAAG,QAAQ,GAAG,IAAI;MACvC,OAAO,CAAC,CAAC,EAAElB,MAAM,CAACmB,UAAU,EAAE,IAAI,EAAE,IAAI,CAACC,KAAK,CAACC,WAAW,CAAE,GAAE,IAAI,CAACH,KAAK,GAAG,MAAM,GAAG,EAAG,oBAAmB,EAAE,SAAS,EAAE,EAAE,CAAC,EAAEL,uBAAuB,GAAI,kFAAiF,GAAI,oBAAmBI,EAAG,oBAAmB,EAAEd,SAAS,EAAE,UAAU,EAAEO,WAAW,CAAC;IAC5T;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}