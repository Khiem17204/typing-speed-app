{"ast":null,"code":"/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\n(function (root, definition) {\n  \"use strict\";\n\n  if (typeof define === 'function' && define.amd) {\n    define(definition);\n  } else if (typeof module === 'object' && module.exports) {\n    module.exports = definition();\n  } else {\n    root.log = definition();\n  }\n})(this, function () {\n  \"use strict\";\n\n  // Slightly dubious tricks to cut down minimized file size\n  var noop = function () {};\n  var undefinedType = \"undefined\";\n  var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\n  var logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n  // Cross-browser bind equivalent that works at least back to IE6\n  function bindMethod(obj, methodName) {\n    var method = obj[methodName];\n    if (typeof method.bind === 'function') {\n      return method.bind(obj);\n    } else {\n      try {\n        return Function.prototype.bind.call(method, obj);\n      } catch (e) {\n        // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n        return function () {\n          return Function.prototype.apply.apply(method, [obj, arguments]);\n        };\n      }\n    }\n  }\n\n  // Trace() doesn't print the message in IE, so for that case we need to wrap it\n  function traceForIE() {\n    if (console.log) {\n      if (console.log.apply) {\n        console.log.apply(console, arguments);\n      } else {\n        // In old IE, native console methods themselves don't have apply().\n        Function.prototype.apply.apply(console.log, [console, arguments]);\n      }\n    }\n    if (console.trace) console.trace();\n  }\n\n  // Build the best logging method possible for this env\n  // Wherever possible we want to bind, not wrap, to preserve stack traces\n  function realMethod(methodName) {\n    if (methodName === 'debug') {\n      methodName = 'log';\n    }\n    if (typeof console === undefinedType) {\n      return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n    } else if (methodName === 'trace' && isIE) {\n      return traceForIE;\n    } else if (console[methodName] !== undefined) {\n      return bindMethod(console, methodName);\n    } else if (console.log !== undefined) {\n      return bindMethod(console, 'log');\n    } else {\n      return noop;\n    }\n  }\n\n  // These private functions always need `this` to be set properly\n\n  function replaceLoggingMethods(level, loggerName) {\n    /*jshint validthis:true */\n    for (var i = 0; i < logMethods.length; i++) {\n      var methodName = logMethods[i];\n      this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);\n    }\n\n    // Define log.log as an alias for log.debug\n    this.log = this.debug;\n  }\n\n  // In old IE versions, the console isn't present until you first open it.\n  // We build realMethod() replacements here that regenerate logging methods\n  function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n    return function () {\n      if (typeof console !== undefinedType) {\n        replaceLoggingMethods.call(this, level, loggerName);\n        this[methodName].apply(this, arguments);\n      }\n    };\n  }\n\n  // By default, we use closely bound real methods wherever possible, and\n  // otherwise we wait for a console to appear, and then try again.\n  function defaultMethodFactory(methodName, level, loggerName) {\n    /*jshint validthis:true */\n    return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\n  }\n  function Logger(name, defaultLevel, factory) {\n    var self = this;\n    var currentLevel;\n    defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n    var storageKey = \"loglevel\";\n    if (typeof name === \"string\") {\n      storageKey += \":\" + name;\n    } else if (typeof name === \"symbol\") {\n      storageKey = undefined;\n    }\n    function persistLevelIfPossible(levelNum) {\n      var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n      if (typeof window === undefinedType || !storageKey) return;\n\n      // Use localStorage if available\n      try {\n        window.localStorage[storageKey] = levelName;\n        return;\n      } catch (ignore) {}\n\n      // Use session cookie as fallback\n      try {\n        window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n      } catch (ignore) {}\n    }\n    function getPersistedLevel() {\n      var storedLevel;\n      if (typeof window === undefinedType || !storageKey) return;\n      try {\n        storedLevel = window.localStorage[storageKey];\n      } catch (ignore) {}\n\n      // Fallback to cookies if local storage gives us nothing\n      if (typeof storedLevel === undefinedType) {\n        try {\n          var cookie = window.document.cookie;\n          var location = cookie.indexOf(encodeURIComponent(storageKey) + \"=\");\n          if (location !== -1) {\n            storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n          }\n        } catch (ignore) {}\n      }\n\n      // If the stored level is not valid, treat it as if nothing was stored.\n      if (self.levels[storedLevel] === undefined) {\n        storedLevel = undefined;\n      }\n      return storedLevel;\n    }\n    function clearPersistedLevel() {\n      if (typeof window === undefinedType || !storageKey) return;\n\n      // Use localStorage if available\n      try {\n        window.localStorage.removeItem(storageKey);\n        return;\n      } catch (ignore) {}\n\n      // Use session cookie as fallback\n      try {\n        window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n      } catch (ignore) {}\n    }\n\n    /*\r\n     *\r\n     * Public logger API - see https://github.com/pimterry/loglevel for details\r\n     *\r\n     */\n\n    self.name = name;\n    self.levels = {\n      \"TRACE\": 0,\n      \"DEBUG\": 1,\n      \"INFO\": 2,\n      \"WARN\": 3,\n      \"ERROR\": 4,\n      \"SILENT\": 5\n    };\n    self.methodFactory = factory || defaultMethodFactory;\n    self.getLevel = function () {\n      return currentLevel;\n    };\n    self.setLevel = function (level, persist) {\n      if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n        level = self.levels[level.toUpperCase()];\n      }\n      if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n        currentLevel = level;\n        if (persist !== false) {\n          // defaults to true\n          persistLevelIfPossible(level);\n        }\n        replaceLoggingMethods.call(self, level, name);\n        if (typeof console === undefinedType && level < self.levels.SILENT) {\n          return \"No console available for logging\";\n        }\n      } else {\n        throw \"log.setLevel() called with invalid level: \" + level;\n      }\n    };\n    self.setDefaultLevel = function (level) {\n      defaultLevel = level;\n      if (!getPersistedLevel()) {\n        self.setLevel(level, false);\n      }\n    };\n    self.resetLevel = function () {\n      self.setLevel(defaultLevel, false);\n      clearPersistedLevel();\n    };\n    self.enableAll = function (persist) {\n      self.setLevel(self.levels.TRACE, persist);\n    };\n    self.disableAll = function (persist) {\n      self.setLevel(self.levels.SILENT, persist);\n    };\n\n    // Initialize with the right level\n    var initialLevel = getPersistedLevel();\n    if (initialLevel == null) {\n      initialLevel = defaultLevel;\n    }\n    self.setLevel(initialLevel, false);\n  }\n\n  /*\r\n   *\r\n   * Top-level API\r\n   *\r\n   */\n\n  var defaultLogger = new Logger();\n  var _loggersByName = {};\n  defaultLogger.getLogger = function getLogger(name) {\n    if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\n      throw new TypeError(\"You must supply a name when creating a logger.\");\n    }\n    var logger = _loggersByName[name];\n    if (!logger) {\n      logger = _loggersByName[name] = new Logger(name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n    }\n    return logger;\n  };\n\n  // Grab the current global log variable in case of overwrite\n  var _log = typeof window !== undefinedType ? window.log : undefined;\n  defaultLogger.noConflict = function () {\n    if (typeof window !== undefinedType && window.log === defaultLogger) {\n      window.log = _log;\n    }\n    return defaultLogger;\n  };\n  defaultLogger.getLoggers = function getLoggers() {\n    return _loggersByName;\n  };\n\n  // ES6 default export, for compatibility\n  defaultLogger['default'] = defaultLogger;\n  return defaultLogger;\n});","map":{"version":3,"names":["root","definition","define","amd","module","exports","log","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","trace","realMethod","undefined","replaceLoggingMethods","level","loggerName","i","length","methodFactory","debug","enableLoggingWhenConsoleArrives","defaultMethodFactory","Logger","name","defaultLevel","factory","self","currentLevel","storageKey","persistLevelIfPossible","levelNum","levelName","toUpperCase","localStorage","ignore","document","cookie","encodeURIComponent","getPersistedLevel","storedLevel","location","indexOf","exec","slice","levels","clearPersistedLevel","removeItem","getLevel","setLevel","persist","SILENT","setDefaultLevel","resetLevel","enableAll","TRACE","disableAll","initialLevel","defaultLogger","_loggersByName","getLogger","TypeError","logger","_log","noConflict","getLoggers"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/node_modules/loglevel/lib/loglevel.js"],"sourcesContent":["/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\n(function (root, definition) {\r\n    \"use strict\";\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(definition);\r\n    } else if (typeof module === 'object' && module.exports) {\r\n        module.exports = definition();\r\n    } else {\r\n        root.log = definition();\r\n    }\r\n}(this, function () {\r\n    \"use strict\";\r\n\r\n    // Slightly dubious tricks to cut down minimized file size\r\n    var noop = function() {};\r\n    var undefinedType = \"undefined\";\r\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\r\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\r\n    );\r\n\r\n    var logMethods = [\r\n        \"trace\",\r\n        \"debug\",\r\n        \"info\",\r\n        \"warn\",\r\n        \"error\"\r\n    ];\r\n\r\n    // Cross-browser bind equivalent that works at least back to IE6\r\n    function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n            return method.bind(obj);\r\n        } else {\r\n            try {\r\n                return Function.prototype.bind.call(method, obj);\r\n            } catch (e) {\r\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n                return function() {\r\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\r\n    function traceForIE() {\r\n        if (console.log) {\r\n            if (console.log.apply) {\r\n                console.log.apply(console, arguments);\r\n            } else {\r\n                // In old IE, native console methods themselves don't have apply().\r\n                Function.prototype.apply.apply(console.log, [console, arguments]);\r\n            }\r\n        }\r\n        if (console.trace) console.trace();\r\n    }\r\n\r\n    // Build the best logging method possible for this env\r\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\r\n    function realMethod(methodName) {\r\n        if (methodName === 'debug') {\r\n            methodName = 'log';\r\n        }\r\n\r\n        if (typeof console === undefinedType) {\r\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\r\n        } else if (methodName === 'trace' && isIE) {\r\n            return traceForIE;\r\n        } else if (console[methodName] !== undefined) {\r\n            return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n            return bindMethod(console, 'log');\r\n        } else {\r\n            return noop;\r\n        }\r\n    }\r\n\r\n    // These private functions always need `this` to be set properly\r\n\r\n    function replaceLoggingMethods(level, loggerName) {\r\n        /*jshint validthis:true */\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n            var methodName = logMethods[i];\r\n            this[methodName] = (i < level) ?\r\n                noop :\r\n                this.methodFactory(methodName, level, loggerName);\r\n        }\r\n\r\n        // Define log.log as an alias for log.debug\r\n        this.log = this.debug;\r\n    }\r\n\r\n    // In old IE versions, the console isn't present until you first open it.\r\n    // We build realMethod() replacements here that regenerate logging methods\r\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\r\n        return function () {\r\n            if (typeof console !== undefinedType) {\r\n                replaceLoggingMethods.call(this, level, loggerName);\r\n                this[methodName].apply(this, arguments);\r\n            }\r\n        };\r\n    }\r\n\r\n    // By default, we use closely bound real methods wherever possible, and\r\n    // otherwise we wait for a console to appear, and then try again.\r\n    function defaultMethodFactory(methodName, level, loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) ||\r\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n    }\r\n\r\n    function Logger(name, defaultLevel, factory) {\r\n      var self = this;\r\n      var currentLevel;\r\n      defaultLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\r\n\r\n      var storageKey = \"loglevel\";\r\n      if (typeof name === \"string\") {\r\n        storageKey += \":\" + name;\r\n      } else if (typeof name === \"symbol\") {\r\n        storageKey = undefined;\r\n      }\r\n\r\n      function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage[storageKey] = levelName;\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      function getPersistedLevel() {\r\n          var storedLevel;\r\n\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          try {\r\n              storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          // Fallback to cookies if local storage gives us nothing\r\n          if (typeof storedLevel === undefinedType) {\r\n              try {\r\n                  var cookie = window.document.cookie;\r\n                  var location = cookie.indexOf(\r\n                      encodeURIComponent(storageKey) + \"=\");\r\n                  if (location !== -1) {\r\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\r\n                  }\r\n              } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n              storedLevel = undefined;\r\n          }\r\n\r\n          return storedLevel;\r\n      }\r\n\r\n      function clearPersistedLevel() {\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n              window.localStorage.removeItem(storageKey);\r\n              return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n              window.document.cookie =\r\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\r\n          } catch (ignore) {}\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Public logger API - see https://github.com/pimterry/loglevel for details\r\n       *\r\n       */\r\n\r\n      self.name = name;\r\n\r\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\r\n          \"ERROR\": 4, \"SILENT\": 5};\r\n\r\n      self.methodFactory = factory || defaultMethodFactory;\r\n\r\n      self.getLevel = function () {\r\n          return currentLevel;\r\n      };\r\n\r\n      self.setLevel = function (level, persist) {\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n              level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n              currentLevel = level;\r\n              if (persist !== false) {  // defaults to true\r\n                  persistLevelIfPossible(level);\r\n              }\r\n              replaceLoggingMethods.call(self, level, name);\r\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\r\n                  return \"No console available for logging\";\r\n              }\r\n          } else {\r\n              throw \"log.setLevel() called with invalid level: \" + level;\r\n          }\r\n      };\r\n\r\n      self.setDefaultLevel = function (level) {\r\n          defaultLevel = level;\r\n          if (!getPersistedLevel()) {\r\n              self.setLevel(level, false);\r\n          }\r\n      };\r\n\r\n      self.resetLevel = function () {\r\n          self.setLevel(defaultLevel, false);\r\n          clearPersistedLevel();\r\n      };\r\n\r\n      self.enableAll = function(persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n      };\r\n\r\n      self.disableAll = function(persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n      };\r\n\r\n      // Initialize with the right level\r\n      var initialLevel = getPersistedLevel();\r\n      if (initialLevel == null) {\r\n          initialLevel = defaultLevel;\r\n      }\r\n      self.setLevel(initialLevel, false);\r\n    }\r\n\r\n    /*\r\n     *\r\n     * Top-level API\r\n     *\r\n     */\r\n\r\n    var defaultLogger = new Logger();\r\n\r\n    var _loggersByName = {};\r\n    defaultLogger.getLogger = function getLogger(name) {\r\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\r\n          throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n          logger = _loggersByName[name] = new Logger(\r\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\r\n        }\r\n        return logger;\r\n    };\r\n\r\n    // Grab the current global log variable in case of overwrite\r\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\r\n    defaultLogger.noConflict = function() {\r\n        if (typeof window !== undefinedType &&\r\n               window.log === defaultLogger) {\r\n            window.log = _log;\r\n        }\r\n\r\n        return defaultLogger;\r\n    };\r\n\r\n    defaultLogger.getLoggers = function getLoggers() {\r\n        return _loggersByName;\r\n    };\r\n\r\n    // ES6 default export, for compatibility\r\n    defaultLogger['default'] = defaultLogger;\r\n\r\n    return defaultLogger;\r\n}));\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}