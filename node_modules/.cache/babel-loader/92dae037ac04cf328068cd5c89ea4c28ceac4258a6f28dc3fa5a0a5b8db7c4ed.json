{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport { toBeChecked } from '@testing-library/jest-dom/matchers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numWords\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [char, setChar] = useState(\"\");\n  const [currWord, setCurrWord] = useState(0);\n  const [currIndex, setCurrIndex] = useState(-1);\n  const [completedLines, setCompletedLines] = useState(0);\n  const [currLineIndex, setCurrLineIndex] = useState(0);\n  useEffect(() => {\n    setWords(generateWords());\n  }, [numWords]);\n  function generateWords(n) {\n    return new Array(numWords).fill(null).map(() => generate());\n  }\n  const maxLines = Math.ceil(numWords / 7); // Calculate the maximum number of lines\n\n  useEffect(() => {\n    setCompletedLines(currWord >= numWords ? maxLines : Math.floor(currWord / 7));\n  }, [currWord, numWords]);\n  const startLineIndex = completedLines * 7; // Calculate the starting line index\n  const endLineIndex = Math.min((completedLines + 10) * 7, numWords); // Calculate the ending line index\n\n  useEffect(() => {\n    const lineOffset = startLineIndex / 7;\n    setCurrWord(currWord - lineOffset * 7);\n    setCurrIndex(-1);\n  }, [startLineIndex, currWord]);\n  let keyCode = 0;\n  const handleKeyDown = event => {\n    keyCode = event.keyCode;\n    if (keyCode === 32) {\n      setCurrInput([]);\n      setCurrWord(prevState => prevState + 1);\n      setCurrIndex(-1);\n      setChar('space');\n      if ((currWord + 1) % 7 === 0) {\n        setCompletedLines(prevState => prevState + 1);\n      }\n    } else if (keyCode === 8) {\n      if (currInput.length !== 0) {\n        setCurrInput(currInput => currInput.slice(0, -1));\n        setCurrIndex(index => {\n          if (index >= 0) {\n            return index - 1;\n          } else {\n            return -1;\n          }\n        });\n        setChar('backspace');\n      }\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      setChar(chr.toLowerCase());\n      setCurrInput(Input => [...Input, chr.toLowerCase()]);\n      setCurrIndex(Index => Index + 1);\n    }\n  };\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\n    var _words$currWord, _words$currWord2;\n    let space = document.createElement(\"span\");\n    space.appendChild(document.createTextNode(\" \"));\n    if (char !== \"backspace\" && currIndex >= ((_words$currWord = words[currWord]) === null || _words$currWord === void 0 ? void 0 : _words$currWord.length)) {\n      let element = document.createElement(\"span\");\n      element.key = currIndex + 1;\n      element.id = `${currWord}-${currIndex}`;\n      element.className = \"word-incorrect\";\n      element.onKeyDown = \"handleKeyDown\";\n      element.appendChild(document.createTextNode(`${currInput[currInput.length - 1]}`));\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(element);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(element);\n      document.getElementById(currWord).appendChild(space);\n    } else if (char === \"backspace\" && currIndex >= ((_words$currWord2 = words[currWord]) === null || _words$currWord2 === void 0 ? void 0 : _words$currWord2.length) - 1) {\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(space);\n    }\n  }\n  function changeColor() {\n    let element = document.getElementById(`${currWord}-${currIndex}`);\n    console.log(currWord, currIndex);\n    // console.log(element.innerHTML)\n    if (char === \"backspace\") {\n      let element2 = document.getElementById(`${currWord}-${currIndex + 1}`);\n      if (element2) {\n        element2.className = \"word-unrendered\";\n      }\n    } else {\n      if (element) {\n        element.className = `word-${checkMatch(char)}`;\n      }\n    }\n  }\n  useEffect(() => {\n    injectExtraWords(words, currIndex, currWord, currInput, char);\n  }, [currInput]);\n  useEffect(() => {\n    changeColor();\n  }, [currInput]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\n  }, [currInput]);\n  function checkMatch(char) {\n    if (currIndex >= words[currWord].length) {\n      return \"redundant\";\n    }\n    if (words[currWord][currIndex] === char) {\n      return \"correct\";\n    } else {\n      return \"incorrect\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: words.slice(startLineIndex, endLineIndex).map((word, i) => {\n          const lineIndex = startLineIndex + i;\n          const isCurrentLine = lineIndex === currLineIndex;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `${i}`,\n            children: [word.split(\"\").map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              id: `${i}-${idx}`,\n              className: `word-${isCurrentLine ? checkMatch(char) : \"unrendered\"}`,\n              children: char\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 23\n            }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n}\n_s(Typing, \"PuNDqdUQiyP+VoHH3f0hrXBC3ac=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","toBeChecked","jsxDEV","_jsxDEV","Typing","_ref","_s","numWords","words","setWords","currInput","setCurrInput","char","setChar","currWord","setCurrWord","currIndex","setCurrIndex","completedLines","setCompletedLines","currLineIndex","setCurrLineIndex","generateWords","n","Array","fill","map","maxLines","Math","ceil","floor","startLineIndex","endLineIndex","min","lineOffset","keyCode","handleKeyDown","event","prevState","length","slice","index","chrCode","chr","String","fromCharCode","toLowerCase","Input","Index","injectExtraWords","_words$currWord","_words$currWord2","space","document","createElement","appendChild","createTextNode","element","key","id","className","onKeyDown","currWordElement","getElementById","removeChild","lastChild","changeColor","console","log","element2","checkMatch","window","addEventListener","removeEventListener","children","word","i","lineIndex","isCurrentLine","split","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { generate } from 'random-words'\r\nimport { toBeChecked } from '@testing-library/jest-dom/matchers'\r\n\r\nexport default function Typing({ numWords }) {\r\n    const [words, setWords] = useState([])\r\n    const [currInput, setCurrInput] = useState([])\r\n    const [char, setChar] = useState(\"\")\r\n    const [currWord, setCurrWord] = useState(0)\r\n    const [currIndex, setCurrIndex] = useState(-1)\r\n    const [completedLines, setCompletedLines] = useState(0);\r\n    const [currLineIndex, setCurrLineIndex] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        setWords(generateWords())\r\n    }, [numWords])\r\n\r\n    function generateWords(n) {\r\n        return new Array(numWords).fill(null).map(() => generate())\r\n    }\r\n\r\n    const maxLines = Math.ceil(numWords / 7); // Calculate the maximum number of lines\r\n\r\n  useEffect(() => {\r\n    setCompletedLines(currWord >= numWords ? maxLines : Math.floor(currWord / 7));\r\n  }, [currWord, numWords]);\r\n\r\n  const startLineIndex = completedLines * 7; // Calculate the starting line index\r\n  const endLineIndex = Math.min((completedLines + 10) * 7, numWords); // Calculate the ending line index\r\n\r\n  useEffect(() => {\r\n    const lineOffset = startLineIndex / 7;\r\n    setCurrWord(currWord - lineOffset * 7);\r\n    setCurrIndex(-1);\r\n  }, [startLineIndex, currWord]);\r\n\r\n    let keyCode = 0;\r\n\r\n    const handleKeyDown = (event) => {\r\n        keyCode = event.keyCode;\r\n        if (keyCode === 32) {\r\n          setCurrInput([]);\r\n          setCurrWord((prevState) => prevState + 1);\r\n          setCurrIndex(-1);\r\n          setChar('space');\r\n          if ((currWord + 1) % 7 === 0) {\r\n            setCompletedLines((prevState) => prevState + 1);\r\n          }\r\n        } else if (keyCode === 8) {\r\n          if (currInput.length !== 0) {\r\n            setCurrInput((currInput) => currInput.slice(0, -1));\r\n            setCurrIndex((index) => {\r\n              if (index >= 0) {\r\n                return index - 1;\r\n              } else {\r\n                return -1;\r\n              }\r\n            });\r\n            setChar('backspace');\r\n          }\r\n        } else if (keyCode >= 65 && keyCode <= 90) {\r\n          let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n          let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\r\n          setChar(chr.toLowerCase());\r\n          setCurrInput((Input) => [...Input, chr.toLowerCase()]);\r\n          setCurrIndex((Index) => Index + 1);\r\n        }\r\n      };\r\n\r\n\r\n    function injectExtraWords(words, currIndex, currWord, currInput, char) {\r\n        let space = document.createElement(\"span\")\r\n        space.appendChild(\r\n            document.createTextNode(\" \"))\r\n        if (char !== \"backspace\" && currIndex >= words[currWord]?.length) {\r\n\r\n\r\n            let element = document.createElement(\"span\");\r\n            element.key = currIndex + 1\r\n            element.id = `${currWord}-${currIndex}`\r\n            element.className = \"word-incorrect\"\r\n            element.onKeyDown = \"handleKeyDown\"\r\n\r\n            element.appendChild(\r\n                document.createTextNode(`${currInput[currInput.length - 1]}`)\r\n            )\r\n            const currWordElement = document.getElementById(currWord);\r\n            if (currWordElement) {\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.appendChild(element);\r\n                currWordElement.appendChild(space);\r\n            }\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).appendChild(element)\r\n            document.getElementById(currWord).appendChild(space)\r\n\r\n\r\n\r\n        }\r\n        else if (char === \"backspace\" && currIndex >= words[currWord]?.length - 1) {\r\n            const currWordElement = document.getElementById(currWord);\r\n            if (currWordElement) {\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.appendChild(space);\r\n            }\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).appendChild(space)\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeColor() {\r\n\r\n        let element = document.getElementById(`${currWord}-${currIndex}`)\r\n        console.log(currWord, currIndex)\r\n        // console.log(element.innerHTML)\r\n        if (char === \"backspace\") {\r\n            let element2 = document.getElementById(`${currWord}-${currIndex + 1}`)\r\n            if (element2) {\r\n                element2.className = \"word-unrendered\"\r\n            }\r\n        }\r\n        else {\r\n            if (element) {\r\n                element.className = `word-${checkMatch(char)}`\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        injectExtraWords(words, currIndex, currWord, currInput, char)\r\n\r\n\r\n    }, [currInput])\r\n\r\n    useEffect(() => {\r\n        changeColor()\r\n    }, [currInput])\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\r\n    }, [currInput]);\r\n\r\n\r\n    function checkMatch(char) {\r\n        if (currIndex >= words[currWord].length) {\r\n            return \"redundant\"\r\n        }\r\n\r\n        if (words[currWord][currIndex] === char) {\r\n            return \"correct\"\r\n        } else {\r\n            return \"incorrect\"\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n          <div className=\"typing--section\">\r\n            <div className=\"prompt\">\r\n              {words.slice(startLineIndex, endLineIndex).map((word, i) => {\r\n                const lineIndex = startLineIndex + i;\r\n                const isCurrentLine = lineIndex === currLineIndex;\r\n                return (\r\n                  <span key={i} id={`${i}`}>\r\n                    {word.split(\"\").map((char, idx) => (\r\n                      <span\r\n                        key={idx}\r\n                        id={`${i}-${idx}`}\r\n                        className={`word-${isCurrentLine ? checkMatch(char) : \"unrendered\"}`}\r\n                      >\r\n                        {char}\r\n                      </span>\r\n                    ))}\r\n                    <span> </span>\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}