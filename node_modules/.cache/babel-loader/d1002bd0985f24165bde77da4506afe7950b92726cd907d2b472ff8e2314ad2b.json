{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport { toBeChecked } from '@testing-library/jest-dom/matchers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numWords\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [char, setChar] = useState(\"\");\n  const [currWord, setCurrWord] = useState(0);\n  const [currIndex, setCurrIndex] = useState(-1);\n  const [completedLines, setCompletedLines] = useState(0);\n  const [currLineIndex, setCurrLineIndex] = useState(0);\n  const [lines, setLines] = useState([]);\n  useEffect(() => {\n    setWords(generateWords());\n  }, [numWords]);\n  function generateWords(n) {\n    return new Array(numWords).fill(null).map(() => generate());\n  }\n\n  /**const maxLines = 9; // Maximum number of lines to display\r\n  useEffect(() => {\r\n  setCompletedLines(currWord >= numWords ? maxLines : Math.floor(currWord / 7));\r\n  }, [currWord, numWords]);\r\n  const startLineIndex = completedLines * 7; // Calculate the starting line index\r\n  const endLineIndex = Math.min((completedLines + maxLines) * 7, numWords); // Calculate the ending line index\r\n  useEffect(() => {\r\n  const lineOffset = startLineIndex / 7;\r\n  setCurrWord(currWord - lineOffset * 7);\r\n  setCurrIndex(-1);\r\n  }, [startLineIndex, currWord]);**/\n\n  let keyCode = 0;\n  const handleKeyDown = event => {\n    keyCode = event.keyCode;\n    if (keyCode === 32) {\n      setCurrInput([]);\n      setCurrWord(prevState => prevState + 1);\n      setCurrIndex(-1);\n      checkLineCompletion();\n      setChar('space');\n      if ((currWord + 1) % 7 === 0) {\n        setCompletedLines(prevState => prevState + 1);\n      }\n    } else if (keyCode === 8) {\n      if (currInput.length !== 0) {\n        setCurrInput(currInput => currInput.slice(0, -1));\n        setCurrIndex(index => {\n          if (index >= 0) {\n            return index - 1;\n          } else {\n            return -1;\n          }\n        });\n        setChar('backspace');\n      }\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      setChar(chr.toLowerCase());\n      setCurrInput(Input => [...Input, chr.toLowerCase()]);\n      setCurrIndex(Index => Index + 1);\n    }\n  };\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\n    var _words$currWord, _words$currWord2;\n    let space = document.createElement(\"span\");\n    space.appendChild(document.createTextNode(\" \"));\n    if (char !== \"backspace\" && currIndex >= ((_words$currWord = words[currWord]) === null || _words$currWord === void 0 ? void 0 : _words$currWord.length)) {\n      let element = document.createElement(\"span\");\n      element.key = currIndex + 1;\n      element.id = `${currWord}-${currIndex}`;\n      element.className = \"word-incorrect\";\n      element.onKeyDown = \"handleKeyDown\";\n      element.appendChild(document.createTextNode(`${currInput[currInput.length - 1]}`));\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(element);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(element);\n      document.getElementById(currWord).appendChild(space);\n    } else if (char === \"backspace\" && currIndex >= ((_words$currWord2 = words[currWord]) === null || _words$currWord2 === void 0 ? void 0 : _words$currWord2.length) - 1) {\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(space);\n    }\n  }\n  function changeColor() {\n    let element = document.getElementById(`${currWord}-${currIndex}`);\n    console.log(currWord, currIndex);\n    // console.log(element.innerHTML)\n    if (char === \"backspace\") {\n      let element2 = document.getElementById(`${currWord}-${currIndex + 1}`);\n      if (element2) {\n        element2.className = \"word-unrendered\";\n      }\n    } else {\n      if (element) {\n        element.className = `word-${checkMatch(char)}`;\n      }\n    }\n  }\n  useEffect(() => {\n    injectExtraWords(words, currIndex, currWord, currInput, char);\n  }, [currInput]);\n  useEffect(() => {\n    changeColor();\n  }, [currInput]);\n  function checkLineCompletion() {\n    const lineIndex = Math.floor(currWord / WORDS_PER_LINE);\n    if (lineIndex >= MAX_LINES) {\n      const remainingLines = lines.slice(1);\n      setLines(remainingLines);\n    }\n    const newLine = words.slice(currWord, currWord + WORDS_PER_LINE);\n    setLines(prevLines => [...prevLines, newLine]);\n  }\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\n  }, [currInput]);\n  useEffect(() => {\n    checkLineCompletion();\n  }, [currWord]);\n  function checkMatch(char) {\n    var _words$currWord3;\n    if (currIndex >= ((_words$currWord3 = words[currWord]) === null || _words$currWord3 === void 0 ? void 0 : _words$currWord3.length) || !words[currWord]) {\n      return \"redundant\";\n    }\n    if (words[currWord][currIndex] === char) {\n      return \"correct\";\n    } else {\n      return \"incorrect\";\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: words.slice(startLineIndex, endLineIndex).map((word, i) => {\n          const lineIndex = startLineIndex + i;\n          const isCurrentLine = lineIndex === completedLines;\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `${i}`,\n            children: [word.split(\"\").map((char, idx) => {\n              const wordIndex = lineIndex * 7 + idx;\n              const isCurrentWord = wordIndex === currWord;\n              return /*#__PURE__*/_jsxDEV(\"span\", {\n                id: `${i}-${idx}`,\n                className: `word-${isCurrentLine && isCurrentWord ? checkMatch(char) : \"unrendered\"}`,\n                children: char\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 25\n              }, this);\n            }), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 9\n  }, this);\n}\n_s(Typing, \"saKcFMMhVXlX+GhzspdRDPjdjrE=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","toBeChecked","jsxDEV","_jsxDEV","Typing","_ref","_s","numWords","words","setWords","currInput","setCurrInput","char","setChar","currWord","setCurrWord","currIndex","setCurrIndex","completedLines","setCompletedLines","currLineIndex","setCurrLineIndex","lines","setLines","generateWords","n","Array","fill","map","keyCode","handleKeyDown","event","prevState","checkLineCompletion","length","slice","index","chrCode","Math","floor","chr","String","fromCharCode","toLowerCase","Input","Index","injectExtraWords","_words$currWord","_words$currWord2","space","document","createElement","appendChild","createTextNode","element","key","id","className","onKeyDown","currWordElement","getElementById","removeChild","lastChild","changeColor","console","log","element2","checkMatch","lineIndex","WORDS_PER_LINE","MAX_LINES","remainingLines","newLine","prevLines","window","addEventListener","removeEventListener","_words$currWord3","children","startLineIndex","endLineIndex","word","i","isCurrentLine","split","idx","wordIndex","isCurrentWord","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { generate } from 'random-words'\r\nimport { toBeChecked } from '@testing-library/jest-dom/matchers'\r\n\r\nexport default function Typing({ numWords }) {\r\n    const [words, setWords] = useState([])\r\n    const [currInput, setCurrInput] = useState([])\r\n    const [char, setChar] = useState(\"\")\r\n    const [currWord, setCurrWord] = useState(0)\r\n    const [currIndex, setCurrIndex] = useState(-1)\r\n    const [completedLines, setCompletedLines] = useState(0);\r\n    const [currLineIndex, setCurrLineIndex] = useState(0);\r\n    const [lines, setLines] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        setWords(generateWords())\r\n    }, [numWords])\r\n\r\n    function generateWords(n) {\r\n        return new Array(numWords).fill(null).map(() => generate())\r\n    }\r\n\r\n    /**const maxLines = 9; // Maximum number of lines to display\r\n\r\n  useEffect(() => {\r\n    setCompletedLines(currWord >= numWords ? maxLines : Math.floor(currWord / 7));\r\n  }, [currWord, numWords]);\r\n\r\n  const startLineIndex = completedLines * 7; // Calculate the starting line index\r\n  const endLineIndex = Math.min((completedLines + maxLines) * 7, numWords); // Calculate the ending line index\r\n\r\n  useEffect(() => {\r\n    const lineOffset = startLineIndex / 7;\r\n    setCurrWord(currWord - lineOffset * 7);\r\n    setCurrIndex(-1);\r\n  }, [startLineIndex, currWord]);**/\r\n  \r\n  \r\n  \r\n    let keyCode = 0;\r\n\r\n    const handleKeyDown = (event) => {\r\n        keyCode = event.keyCode;\r\n        if (keyCode === 32) {\r\n          setCurrInput([]);\r\n          setCurrWord((prevState) => prevState + 1);\r\n          setCurrIndex(-1);\r\n          checkLineCompletion();\r\n          setChar('space');\r\n          if ((currWord + 1) % 7 === 0) {\r\n            setCompletedLines((prevState) => prevState + 1);\r\n          }\r\n        } else if (keyCode === 8) {\r\n          if (currInput.length !== 0) {\r\n            setCurrInput((currInput) => currInput.slice(0, -1));\r\n            setCurrIndex((index) => {\r\n              if (index >= 0) {\r\n                return index - 1;\r\n              } else {\r\n                return -1;\r\n              }\r\n            });\r\n            setChar('backspace');\r\n          }\r\n        } else if (keyCode >= 65 && keyCode <= 90) {\r\n          let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n          let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\r\n          setChar(chr.toLowerCase());\r\n          setCurrInput((Input) => [...Input, chr.toLowerCase()]);\r\n          setCurrIndex((Index) => Index + 1);\r\n        }\r\n      };\r\n\r\n\r\n    function injectExtraWords(words, currIndex, currWord, currInput, char) {\r\n        let space = document.createElement(\"span\")\r\n        space.appendChild(\r\n            document.createTextNode(\" \"))\r\n        if (char !== \"backspace\" && currIndex >= words[currWord]?.length) {\r\n\r\n\r\n            let element = document.createElement(\"span\");\r\n            element.key = currIndex + 1\r\n            element.id = `${currWord}-${currIndex}`\r\n            element.className = \"word-incorrect\"\r\n            element.onKeyDown = \"handleKeyDown\"\r\n\r\n            element.appendChild(\r\n                document.createTextNode(`${currInput[currInput.length - 1]}`)\r\n            )\r\n            const currWordElement = document.getElementById(currWord);\r\n            if (currWordElement) {\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.appendChild(element);\r\n                currWordElement.appendChild(space);\r\n            }\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).appendChild(element)\r\n            document.getElementById(currWord).appendChild(space)\r\n\r\n\r\n\r\n        }\r\n        else if (char === \"backspace\" && currIndex >= words[currWord]?.length - 1) {\r\n            const currWordElement = document.getElementById(currWord);\r\n            if (currWordElement) {\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.removeChild(currWordElement.lastChild);\r\n                currWordElement.appendChild(space);\r\n            }\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild)\r\n            document.getElementById(currWord).appendChild(space)\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function changeColor() {\r\n\r\n        let element = document.getElementById(`${currWord}-${currIndex}`)\r\n        console.log(currWord, currIndex)\r\n        // console.log(element.innerHTML)\r\n        if (char === \"backspace\") {\r\n            let element2 = document.getElementById(`${currWord}-${currIndex + 1}`)\r\n            if (element2) {\r\n                element2.className = \"word-unrendered\"\r\n            }\r\n        }\r\n        else {\r\n            if (element) {\r\n                element.className = `word-${checkMatch(char)}`\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        injectExtraWords(words, currIndex, currWord, currInput, char)\r\n\r\n\r\n    }, [currInput])\r\n\r\n    useEffect(() => {\r\n        changeColor()\r\n    }, [currInput])\r\n\r\n    function checkLineCompletion() {\r\n        const lineIndex = Math.floor(currWord / WORDS_PER_LINE);\r\n        if (lineIndex >= MAX_LINES) {\r\n          const remainingLines = lines.slice(1);\r\n          setLines(remainingLines);\r\n        }\r\n    \r\n        const newLine = words.slice(currWord, currWord + WORDS_PER_LINE);\r\n        setLines(prevLines => [...prevLines, newLine]);\r\n      }\r\n     \r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeyDown);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKeyDown);\r\n        };\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\r\n    }, [currInput]);\r\n\r\n    useEffect(() => {\r\n        checkLineCompletion();\r\n      }, [currWord]);\r\n    \r\n\r\n    function checkMatch(char) {\r\n        if (currIndex >= words[currWord]?.length || !words[currWord]) {\r\n          return \"redundant\";\r\n        }\r\n      \r\n        if (words[currWord][currIndex] === char) {\r\n          return \"correct\";\r\n        } else {\r\n          return \"incorrect\";\r\n        }\r\n      }\r\n      return (\r\n        <div>\r\n          <div className=\"typing--section\">\r\n            <div className=\"prompt\">\r\n              {words.slice(startLineIndex, endLineIndex).map((word, i) => {\r\n                const lineIndex = startLineIndex + i;\r\n                const isCurrentLine = lineIndex === completedLines;\r\n                return (\r\n                  <span key={i} id={`${i}`}>\r\n                    {word.split(\"\").map((char, idx) => {\r\n                      const wordIndex = lineIndex * 7 + idx;\r\n                      const isCurrentWord = wordIndex === currWord;\r\n                      return (\r\n                        <span\r\n                          key={idx}\r\n                          id={`${i}-${idx}`}\r\n                          className={`word-${isCurrentLine && isCurrentWord ? checkMatch(char) : \"unrendered\"}`}\r\n                        >\r\n                          {char}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                    <span> </span>\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n            }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}