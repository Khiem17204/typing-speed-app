{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numCharacters\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [char, setChar] = useState('');\n  const [currWord, setCurrWord] = useState(0);\n  const [currIndex, setCurrIndex] = useState(-1);\n  const [currLineIndex, setCurrLineIndex] = useState(0);\n  const [charsPerLine, setCharsPerLine] = useState(0);\n  useEffect(() => {\n    setWords(generateWords());\n  }, []);\n  useEffect(() => {\n    const handleResize = () => {\n      const promptElement = document.getElementById('prompt');\n      if (promptElement) {\n        const promptWidth = promptElement.offsetWidth;\n        const charWidth = 10; // Adjust this value as needed based on your font size\n        const newCharsPerLine = Math.floor(promptWidth / charWidth);\n        setCharsPerLine(newCharsPerLine);\n      }\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  function generateWords() {\n    return new Array(numCharacters).fill(null).map(() => generate());\n  }\n  let keyCode = 0;\n  const handleKeyDown = event => {\n    keyCode = event.keyCode;\n    if (keyCode === 32) {\n      setCurrInput([]);\n      setCurrWord(prevState => prevState + 1);\n      setCurrIndex(-1);\n      setChar('space');\n    } else if (keyCode === 8) {\n      if (currInput !== []) {\n        setCurrInput(currInput => currInput.slice(0, -1));\n        setCurrIndex(index => {\n          if (index >= 0) {\n            return index - 1;\n          } else {\n            return -1;\n          }\n        });\n        setChar('backspace');\n      }\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      setChar(chr.toLowerCase());\n      setCurrInput(input => [...input, chr.toLowerCase()]);\n      setCurrIndex(index => index + 1);\n    }\n  };\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\n    var _words$currWord, _words$currWord2;\n    let space = document.createElement('span');\n    space.appendChild(document.createTextNode(' '));\n    if (char !== 'backspace' && currIndex >= ((_words$currWord = words[currWord]) === null || _words$currWord === void 0 ? void 0 : _words$currWord.length)) {\n      let element = document.createElement('span');\n      element.key = currIndex + 1;\n      element.id = `${currWord}-${currIndex}`;\n      element.className = 'word-incorrect';\n      element.onKeyDown = 'handleKeyDown';\n      element.appendChild(document.createTextNode(`${currInput[currInput.length - 1]}`));\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(element);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(element);\n      document.getElementById(currWord).appendChild(space);\n    } else if (char === 'backspace' && currIndex >= ((_words$currWord2 = words[currWord]) === null || _words$currWord2 === void 0 ? void 0 : _words$currWord2.length) - 1) {\n      const currWordElement = document.getElementById(currWord);\n      if (currWordElement) {\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.removeChild(currWordElement.lastChild);\n        currWordElement.appendChild(space);\n      }\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\n      document.getElementById(currWord).appendChild(space);\n    }\n  }\n  function changeColor() {\n    let element = document.getElementById(`${currWord}-${currIndex}`);\n    console.log(currWord, currIndex);\n    // console.log(element.innerHTML)\n    if (char === 'backspace') {\n      let element2 = document.getElementById(`${currWord}-${currIndex + 1}`);\n      if (element2) {\n        element2.className = 'word-unrendered';\n      }\n    } else {\n      if (element) {\n        element.className = `word-${checkMatch(char)}`;\n      }\n    }\n  }\n  useEffect(() => {\n    injectExtraWords(words, currIndex, currWord, currInput, char);\n  }, [currInput]);\n  useEffect(() => {\n    changeColor();\n  }, [currInput]);\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\n  }, [currInput]);\n  function checkMatch(char) {\n    if (currIndex >= words[currWord].length) {\n      return 'redundant';\n    }\n    if (words[currWord][currIndex] === char) {\n      return 'correct';\n    } else {\n      return 'incorrect';\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"prompt\",\n        className: \"prompt\",\n        children: words.map((word, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          id: `${i}`,\n          children: [word.split('').map((char, idx) => {\n            const lineNumber = Math.floor(idx / charsPerLine);\n            if (lineNumber !== currLineIndex) {\n              setCurrLineIndex(lineNumber);\n            }\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                id: `${i}-${idx}`,\n                className: \"word-unrendered\",\n                onKeyDown: handleKeyDown,\n                children: char\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          }), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n_s(Typing, \"DwAbLLNBrZl4x6G6Vdnq+N0cfJc=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","jsxDEV","_jsxDEV","Fragment","_Fragment","Typing","_ref","_s","numCharacters","words","setWords","currInput","setCurrInput","char","setChar","currWord","setCurrWord","currIndex","setCurrIndex","currLineIndex","setCurrLineIndex","charsPerLine","setCharsPerLine","generateWords","handleResize","promptElement","document","getElementById","promptWidth","offsetWidth","charWidth","newCharsPerLine","Math","floor","window","addEventListener","removeEventListener","Array","fill","map","keyCode","handleKeyDown","event","prevState","slice","index","chrCode","chr","String","fromCharCode","toLowerCase","input","injectExtraWords","_words$currWord","_words$currWord2","space","createElement","appendChild","createTextNode","length","element","key","id","className","onKeyDown","currWordElement","removeChild","lastChild","changeColor","console","log","element2","checkMatch","children","word","i","split","idx","lineNumber","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { generate } from 'random-words';\r\n\r\nexport default function Typing({ numCharacters }) {\r\n  const [words, setWords] = useState([]);\r\n  const [currInput, setCurrInput] = useState([]);\r\n  const [char, setChar] = useState('');\r\n  const [currWord, setCurrWord] = useState(0);\r\n  const [currIndex, setCurrIndex] = useState(-1);\r\n  const [currLineIndex, setCurrLineIndex] = useState(0);\r\n  const [charsPerLine, setCharsPerLine] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setWords(generateWords());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const promptElement = document.getElementById('prompt');\r\n      if (promptElement) {\r\n        const promptWidth = promptElement.offsetWidth;\r\n        const charWidth = 10; // Adjust this value as needed based on your font size\r\n        const newCharsPerLine = Math.floor(promptWidth / charWidth);\r\n        setCharsPerLine(newCharsPerLine);\r\n      }\r\n    };\r\n\r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  function generateWords() {\r\n    return new Array(numCharacters).fill(null).map(() => generate());\r\n  }\r\n\r\n  let keyCode = 0;\r\n\r\n  const handleKeyDown = (event) => {\r\n    keyCode = event.keyCode;\r\n    if (keyCode === 32) {\r\n      setCurrInput([]);\r\n      setCurrWord((prevState) => prevState + 1);\r\n      setCurrIndex(-1);\r\n      setChar('space');\r\n    } else if (keyCode === 8) {\r\n      if (currInput !== []) {\r\n        setCurrInput((currInput) => currInput.slice(0, -1));\r\n        setCurrIndex((index) => {\r\n          if (index >= 0) {\r\n            return index - 1;\r\n          } else {\r\n            return -1;\r\n          }\r\n        });\r\n        setChar('backspace');\r\n      }\r\n    } else if (keyCode >= 65 && keyCode <= 90) {\r\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\r\n      setChar(chr.toLowerCase());\r\n      setCurrInput((input) => [...input, chr.toLowerCase()]);\r\n      setCurrIndex((index) => index + 1);\r\n    }\r\n  };\r\n\r\n  function injectExtraWords(words, currIndex, currWord, currInput, char) {\r\n    let space = document.createElement('span');\r\n    space.appendChild(document.createTextNode(' '));\r\n    if (char !== 'backspace' && currIndex >= words[currWord]?.length) {\r\n      let element = document.createElement('span');\r\n      element.key = currIndex + 1;\r\n      element.id = `${currWord}-${currIndex}`;\r\n      element.className = 'word-incorrect';\r\n      element.onKeyDown = 'handleKeyDown';\r\n      element.appendChild(document.createTextNode(`${currInput[currInput.length - 1]}`));\r\n      const currWordElement = document.getElementById(currWord);\r\n      if (currWordElement) {\r\n        currWordElement.removeChild(currWordElement.lastChild);\r\n        currWordElement.appendChild(element);\r\n        currWordElement.appendChild(space);\r\n      }\r\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\r\n      document.getElementById(currWord).appendChild(element);\r\n      document.getElementById(currWord).appendChild(space);\r\n    } else if (char === 'backspace' && currIndex >= words[currWord]?.length - 1) {\r\n      const currWordElement = document.getElementById(currWord);\r\n      if (currWordElement) {\r\n        currWordElement.removeChild(currWordElement.lastChild);\r\n        currWordElement.removeChild(currWordElement.lastChild);\r\n        currWordElement.appendChild(space);\r\n      }\r\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\r\n      document.getElementById(currWord).removeChild(document.getElementById(currWord).lastChild);\r\n      document.getElementById(currWord).appendChild(space);\r\n    }\r\n  }\r\n\r\n  function changeColor() {\r\n    let element = document.getElementById(`${currWord}-${currIndex}`);\r\n    console.log(currWord, currIndex);\r\n    // console.log(element.innerHTML)\r\n    if (char === 'backspace') {\r\n      let element2 = document.getElementById(`${currWord}-${currIndex + 1}`);\r\n      if (element2) {\r\n        element2.className = 'word-unrendered';\r\n      }\r\n    } else {\r\n      if (element) {\r\n        element.className = `word-${checkMatch(char)}`;\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    injectExtraWords(words, currIndex, currWord, currInput, char);\r\n  }, [currInput]);\r\n\r\n  useEffect(() => {\r\n    changeColor();\r\n  }, [currInput]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log('A key was pressed: ', currInput, char, words[currWord], currIndex);\r\n  }, [currInput]);\r\n\r\n  function checkMatch(char) {\r\n    if (currIndex >= words[currWord].length) {\r\n      return 'redundant';\r\n    }\r\n\r\n    if (words[currWord][currIndex] === char) {\r\n      return 'correct';\r\n    } else {\r\n      return 'incorrect';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"typing--section\">\r\n        <div id=\"prompt\" className=\"prompt\">\r\n          {words.map((word, i) => (\r\n            <span key={i} id={`${i}`}>\r\n              {word.split('').map((char, idx) => {\r\n                const lineNumber = Math.floor(idx / charsPerLine);\r\n                if (lineNumber !== currLineIndex) {\r\n                  setCurrLineIndex(lineNumber);\r\n                }\r\n                return (\r\n                  <>\r\n                    <span\r\n                      key={idx}\r\n                      id={`${i}-${idx}`}\r\n                      className=\"word-unrendered\"\r\n                      onKeyDown={handleKeyDown}\r\n                    >\r\n                      {char}\r\n                    </span>\r\n                  </>\r\n                );\r\n              })}\r\n              <span> </span>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}