{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tung0\\\\OneDrive\\\\Documents\\\\typing-speed-app\\\\src\\\\components\\\\body\\\\Typing.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { generate } from 'random-words';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Typing(_ref) {\n  _s();\n  let {\n    numWords,\n    charactersPerChunk\n  } = _ref;\n  const [words, setWords] = useState([]);\n  const [currInput, setCurrInput] = useState([]);\n  const [currWord, setCurrWord] = useState(0);\n  const [currIndex, setCurrIndex] = useState(-1);\n  useEffect(() => {\n    setWords(generateWords());\n  }, [numWords]);\n  function generateWords() {\n    return new Array(numWords).fill(null).map(() => generate());\n  }\n  let keyCode = 0;\n  const handleKeyDown = event => {\n    keyCode = event.keyCode;\n    if (keyCode === 32) {\n      setCurrInput([]);\n      setCurrWord(prevState => prevState + 1);\n      setCurrIndex(-1);\n    } else if (keyCode === 8) {\n      if (currInput.length > 0) {\n        setCurrInput(currInput => currInput.slice(0, -1));\n        setCurrIndex(index => index >= 0 ? index - 1 : -1);\n      }\n    } else if (keyCode >= 65 && keyCode <= 90) {\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\n      setCurrInput(Input => [...Input, chr.toLowerCase()]);\n      setCurrIndex(Index => Index + 1);\n    }\n  };\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  function getCurrentChunk() {\n    const currentWord = words[currWord];\n    return currentWord.substring(0, currIndex + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing--section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt\",\n        children: words.map((word, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n          id: `${i}`,\n          children: [word.split('').map((char, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            id: `${i}-${idx}`,\n            className: idx <= currIndex ? 'word-correct' : 'word-incorrect',\n            children: char\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \" \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Chunk: \", getCurrentChunk()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Typing, \"NQB7R3GL3K51jSI/Cyo4J8hiJ/A=\");\n_c = Typing;\nvar _c;\n$RefreshReg$(_c, \"Typing\");","map":{"version":3,"names":["React","useState","useEffect","generate","jsxDEV","_jsxDEV","Typing","_ref","_s","numWords","charactersPerChunk","words","setWords","currInput","setCurrInput","currWord","setCurrWord","currIndex","setCurrIndex","generateWords","Array","fill","map","keyCode","handleKeyDown","event","prevState","length","slice","index","chrCode","Math","floor","chr","String","fromCharCode","Input","toLowerCase","Index","window","addEventListener","removeEventListener","getCurrentChunk","currentWord","substring","children","className","word","i","id","split","char","idx","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tung0/OneDrive/Documents/typing-speed-app/src/components/body/Typing.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { generate } from 'random-words';\r\n\r\nexport default function Typing({ numWords, charactersPerChunk }) {\r\n  const [words, setWords] = useState([]);\r\n  const [currInput, setCurrInput] = useState([]);\r\n  const [currWord, setCurrWord] = useState(0);\r\n  const [currIndex, setCurrIndex] = useState(-1);\r\n\r\n  useEffect(() => {\r\n    setWords(generateWords());\r\n  }, [numWords]);\r\n\r\n  function generateWords() {\r\n    return new Array(numWords).fill(null).map(() => generate());\r\n  }\r\n\r\n  let keyCode = 0;\r\n\r\n  const handleKeyDown = (event) => {\r\n    keyCode = event.keyCode;\r\n    if (keyCode === 32) {\r\n      setCurrInput([]);\r\n      setCurrWord((prevState) => prevState + 1);\r\n      setCurrIndex(-1);\r\n    } else if (keyCode === 8) {\r\n      if (currInput.length > 0) {\r\n        setCurrInput((currInput) => currInput.slice(0, -1));\r\n        setCurrIndex((index) => (index >= 0 ? index - 1 : -1));\r\n      }\r\n    } else if (keyCode >= 65 && keyCode <= 90) {\r\n      let chrCode = keyCode - 48 * Math.floor(keyCode / 48);\r\n      let chr = String.fromCharCode(96 <= keyCode ? chrCode : keyCode);\r\n      setCurrInput((Input) => [...Input, chr.toLowerCase()]);\r\n      setCurrIndex((Index) => Index + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, []);\r\n\r\n  function getCurrentChunk() {\r\n    const currentWord = words[currWord];\r\n    return currentWord.substring(0, currIndex + 1);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className='typing--section'>\r\n        <div className=\"prompt\">\r\n          {words.map((word, i) => (\r\n            <span key={i} id={`${i}`}>\r\n              {word.split('').map((char, idx) => (\r\n                <span\r\n                  key={idx}\r\n                  id={`${i}-${idx}`}\r\n                  className={idx <= currIndex ? 'word-correct' : 'word-incorrect'}\r\n                >\r\n                  {char}\r\n                </span>\r\n              ))}\r\n              <span> </span>\r\n            </span>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p>\r\n          Current Chunk: {getCurrentChunk()}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}